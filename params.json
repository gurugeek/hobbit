{"name":"Hobbit","tagline":"A minimalistic microframework built on top of Rack.","body":"# Hobbit [![Build Status](https://travis-ci.org/patriciomacadden/hobbit.png?branch=master)](https://travis-ci.org/patriciomacadden/hobbit) [![Code Climate](https://codeclimate.com/github/patriciomacadden/hobbit.png)](https://codeclimate.com/github/patriciomacadden/hobbit) [![Coverage Status](https://coveralls.io/repos/patriciomacadden/hobbit/badge.png?branch=master)](https://coveralls.io/r/patriciomacadden/hobbit) [![Dependency Status](https://gemnasium.com/patriciomacadden/hobbit.png)](https://gemnasium.com/patriciomacadden/hobbit) [![Gem Version](https://badge.fury.io/rb/hobbit.png)](http://badge.fury.io/rb/hobbit)\r\n\r\nA minimalistic microframework built on top of [Rack](http://rack.github.io/).\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'hobbit'\r\n# or this if you want to use hobbit master\r\n# gem 'hobbit', github: 'patriciomacadden/hobbit'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```bash\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```bash\r\n$ gem install hobbit\r\n```\r\n\r\n## Features\r\n\r\n* DSL inspired by [Sinatra](http://www.sinatrarb.com/).\r\n* [Speed](https://github.com/patriciomacadden/microbenchmarks).\r\n* Extensible with standard ruby classes and modules, with no extra logic. See\r\n[hobbit-contrib](https://github.com/patriciomacadden/hobbit-contrib).\r\n* Zero configuration.\r\n* Request and response classes could be injected (Defaults to `Rack::Request`\r\nand `Hobbit::Response`, respectively).\r\n\r\n## Philosophy\r\n\r\n* [Don't repeat yourself](http://en.wikipedia.org/wiki/Don't_repeat_yourself)\r\n* Encourages the understanding and use of [Rack](http://rack.github.io/) and\r\nits extensions instead of providing such functionality.\r\n\r\n## Usage\r\n\r\n`Hobbit` applications are just instances of classes that inherits from\r\n`Hobbit::Base`, which complies the\r\n[Rack SPEC](http://rack.rubyforge.org/doc/SPEC.html).\r\n\r\n### Hello World example\r\n\r\nCreate a file called `app.rb`:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass App < Hobbit::Base\r\n  get '/' do\r\n    'Hello World!'\r\n  end\r\nend\r\n```\r\n\r\nCreate a `config.ru` file:\r\n\r\n```ruby\r\nrequire './app'\r\n\r\nrun App.new\r\n```\r\n\r\nRun it with `rackup`:\r\n\r\n```bash\r\n$ rackup\r\n```\r\n\r\nView your app at [http://localhost:9292](http://localhost:9292).\r\n\r\n### Routes\r\n\r\nEvery route is composed of a verb, a path (optional) and a block. When an\r\nincoming request matches a route, the block is executed and a response is sent\r\nback to the client. The return value of the block will be the `body` of the\r\nresponse. The `headers` and `status code` of the response will be calculated by\r\n`Hobbit::Response`, but you could modify it anyway you want it.\r\n\r\nSee an example:\r\n\r\n```ruby\r\nclass App < Hobbit::Base\r\n  get '/' do\r\n    # ...\r\n  end\r\n\r\n  post '/' do\r\n    # ...\r\n  end\r\n\r\n  put '/' do\r\n    # ...\r\n  end\r\n\r\n  patch '/' do\r\n    # ...\r\n  end\r\n\r\n  delete '/' do\r\n    # ...\r\n  end\r\n\r\n  options '/' do\r\n    # ...\r\n  end\r\nend\r\n```\r\n\r\nWhen a route gets called you have this methods available:\r\n\r\n* `env`: The Rack environment.\r\n* `request`: a `Rack::Request` instance.\r\n* `response`: a `Hobbit::Response` instance.\r\n\r\n#### Available methods\r\n\r\n* `delete`\r\n* `get`\r\n* `head`\r\n* `options`\r\n* `patch`\r\n* `post`\r\n* `put`\r\n\r\n**Note**: Since most browsers don't support methods other than **GET** and\r\n**POST** you must use the `Rack::MethodOverride` middleware. (See\r\n[Rack::MethodOverride](https://github.com/rack/rack/blob/master/lib/rack/methodoverride.rb)).\r\n\r\n#### Routes with parameters\r\n\r\nBesides the standard `GET` and `POST` parameters, you can have routes with\r\nparameters:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass App < Hobbit::Base\r\n  # matches both /hi/hobbit and /hi/patricio\r\n  get '/hi/:name' do\r\n    # request.params is filled with the route paramters, like this:\r\n    \"Hello #{request.params[:name]}\"\r\n  end\r\nend\r\n```\r\n\r\n#### Redirecting\r\n\r\nIf you look at Hobbit implementation, you may notice that there is no\r\n`redirect` method (or similar). This is because such functionality is provided\r\nby [Rack::Response](https://github.com/rack/rack/blob/master/lib/rack/response.rb)\r\nand for now we [don't wan't to repeat ourselves](http://en.wikipedia.org/wiki/Don't_repeat_yourself)\r\n(obviously you can create an extension!). So, if you want to redirect to\r\nanother route, do it like this:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass App < Hobbit::Base\r\n  get '/' do\r\n    response.redirect '/hi'\r\n  end\r\n\r\n  get '/hi' do\r\n    'Hello World!'\r\n  end\r\nend\r\n```\r\n\r\n### Built on top of rack\r\n\r\nEach hobbit application is a Rack stack (See this\r\n[blog post](http://m.onkey.org/ruby-on-rack-2-the-builder) for more\r\ninformation).\r\n\r\n#### Mapping applications\r\n\r\nYou can mount any Rack application to the stack by using the `map` class\r\nmethod:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass InnerApp < Hobbit::Base\r\n  # gets called when path_info = '/inner'\r\n  get do\r\n    'Hello InnerApp!'\r\n  end\r\nend\r\n\r\nclass App < Hobbit::Base\r\n  map('/inner') { run InnerApp.new }\r\n\r\n  get '/' do\r\n    'Hello App!'\r\n  end\r\nend\r\n```\r\n\r\n#### Using middleware\r\n\r\nYou can add any Rack middleware to the stack by using the `use` class method:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass App < Hobbit::Base\r\n  include Hobbit::Session\r\n  use Rack::Session::Cookie, secret: SecureRandom.hex(64)\r\n  use Rack::ShowExceptions\r\n\r\n  get '/' do\r\n    session[:name] = 'hobbit'\r\n  end\r\n\r\n  # more routes...\r\nend\r\n\r\nrun App.new\r\n```\r\n\r\n### Request and response classes\r\n\r\nYou can inject the request (`Rack::Request`) and response (`Hobbit::Response`)\r\nclasses for your application. Do it like this:\r\n\r\n```ruby\r\nclass App < Hobbit::Base\r\n  settings[:request_class] = MyRequest\r\n  settings[:response_class] = MyResponse\r\n\r\n  # the rest of your app...\r\nend\r\n```\r\n\r\n### Security\r\n\r\nBy default, `hobbit` (nor Rack) comes without any protection against web\r\nattacks. The use of [rack-protection](https://github.com/rkh/rack-protection)\r\nis highly recommended:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\nrequire 'rack/protection'\r\nrequire 'securerandom'\r\n\r\nclass App < Hobbit::Base\r\n  use Rack::Session::Cookie, secret: SecureRandom.hex(64)\r\n  use Rack::Protection\r\n\r\n  get '/' do\r\n    'Hello World!'\r\n  end\r\nend\r\n```\r\n\r\nPlease see the [rack-protection](https://github.com/rkh/rack-protection)\r\ndocumentation for futher information.\r\n\r\n### Testing\r\n\r\n[rack-test](https://github.com/brynary/rack-test) is highly recommended. See\r\nan example:\r\n\r\nIn `app.rb`:\r\n\r\n```ruby\r\nrequire 'hobbit'\r\n\r\nclass App < Hobbit::Base\r\n  get '/' do\r\n    'Hello World!'\r\n  end\r\nend\r\n```\r\n\r\nIn `app_spec.rb`:\r\n\r\n```ruby\r\nrequire 'minitest/autorun'\r\n# imagine that app.rb and app_spec.rb are stored in the same directory\r\nrequire 'app'\r\n\r\ndescribe App do\r\n  include Rack::Test::Methods\r\n\r\n  def app\r\n    App.new\r\n  end\r\n\r\n  describe 'GET /' do\r\n    it 'must be ok' do\r\n      get '/'\r\n      last_response.must_be :ok?\r\n      last_response.body.must_match /Hello World!/\r\n    end\r\n  end\r\nend\r\n```\r\n\r\nPlease see the [rack-test](https://github.com/brynary/rack-test) documentation\r\nfor futher information.\r\n\r\n### Extensions\r\n\r\nYou can extend hobbit by creating standard ruby modules. See an example:\r\n\r\n```ruby\r\nmodule MyExtension\r\n  def do_something\r\n    # do something\r\n  end\r\nend\r\n\r\nclass App < Hobbit::Base\r\n  include MyExtension\r\n\r\n  get '/' do\r\n    do_something\r\n    'Hello World!'\r\n  end\r\nend\r\n```\r\n\r\n#### Hobbit::Contrib\r\n\r\n[hobbit-contrib](https://github.com/patriciomacadden/hobbit-contrib) is a ruby\r\ngem that comes with a lot of hobbit extensions, such as:\r\n\r\n* `Hobbit::Render`: provides a (very) basic template rendering module.\r\n* `Hobbit::EnhancedRender`: provides an enhanced template rendering module.\r\n* `Hobbit::Session`: provides helper methods for handling user sessions.\r\n* `Hobbit::Environment`: provides helper methods for handling application\r\nenvironments.\r\n* `Hobbit::Filter`: provides helper class methods for handling Sinatra-like\r\nfilters.\r\n* `Hobbit::ErrorHandling`: provides helper class methods for handling\r\nSinatra-like error handling.\r\n\r\n... And many more!\r\n\r\n## Futher documentation\r\n\r\nThe [hobbit wiki](https://github.com/patriciomacadden/hobbit/wiki) contains\r\nguides, how-tos and recipes for a better hobbit experience.\r\n\r\n## Contributing\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\n## License\r\n\r\nSee the [LICENSE](https://github.com/patriciomacadden/hobbit/blob/master/LICENSE).","google":"UA-40776335-1","note":"Don't delete this file! It's used internally to help with page regeneration."}